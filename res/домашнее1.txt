1)
#установлен ли тераформ
terraform --version

#удаляем если надо
sudo rm /usr/local/bin/terraform
wget https://hashicorp-releases.yandexcloud.net/terraform/1.8.4/terraform_1.8.4_linux_amd64.zip
unzip terraform_1.8.4_linux_amd64.zip
sudo mv terraform /usr/local/bin/
terraform -v


#добавляем гит в папку
git clone https://github.com/netology-code/ter-homeworks /home/barmaq/ter-homework1

#версия докер
docker --version
Docker version 20.10.21,

cd /home/barmaq/ter-homework1/01/src

закрыто! надо настроить через провайдера ядекса
настройка провайдеров в яндексе
https://yandex.cloud/ru/docs/tutorials/infrastructure-management/terraform-quickstart#configure-terraform

cd /home/barmaq/ter-homework1/01/src
mv .terraformrc .terraformrc.old
nano .terraformrc

-----------
provider_installation {
  network_mirror {
    url = "https://terraform-mirror.yandexcloud.net/"
    include = ["registry.terraform.io/*/*"]
  }
  direct {
    exclude = ["registry.terraform.io/*/*"]
  }
}
----------
nano .tf

добавить содержимое

terraform {
  required_providers {
    yandex = {
      source = "yandex-cloud/yandex"
    }
  }
  required_version = ">= 0.13"
}

provider "yandex" {
  zone = "<зона_доступности_по_умолчанию>"
}

наша зона ru-central1-a

---------------------
ошибка
│ Error: Invalid provider registry host
│ 
│ The host "registry.terraform.io" given in provider source address "registry.terraform.io/kreuzwerker/docker" does not offer a Terraform provider registry.

файл .terraformrc должен распологаться обязательно в корне папки пользователя
cp .terraformrc ~/.terraformrc

terraform init

#################
2)


#Изучите файл .gitignore. В каком terraform-файле, согласно этому .gitignore, допустимо сохранить личную, секретную информацию?(логины,пароли,ключи,токены итд)
cat .gitignore
# Local .terraform directories and files
**/.terraform/*
.terraform*

!.terraformrc

# .tfstate files
*.tfstate
*.tfstate.*
------------------------

#хранить секреты надо в файлах начинающихся на .terraform*

#################
3)
Выполните код проекта. Найдите в state-файле секретное содержимое созданного ресурса random_password, пришлите в качестве ответа конкретный ключ и его значение.

terraform plan
terraform apply

в файле terraform.tfstate ищем запись для  запись для random_password
находим "result": "3sMMPBxMDW6kpM0s"

#################
4)
Раскомментируйте блок кода, примерно расположенный на строчках 29–42 файла main.tf. Выполните команду terraform validate.
Объясните, в чём заключаются намеренно допущенные ошибки. Исправьте их.

terraform validate

│ Error: Missing name for resource
│ 
│   on main.tf line 32, in resource "docker_image":
│   32: resource "docker_image" {
│ 
│ All resource blocks must have 2 labels (type, name).

нету имени ресурса!

╷
│ Error: Missing name for resource
│ 
│   on main.tf line 32, in resource "docker_image":
│   32: resource "docker_image" {
│ 
│ All resource blocks must have 2 labels (type, name).
╵
╷
│ Error: Invalid resource name
│ 
│   on main.tf line 37, in resource "docker_container" "1nginx":
│   37: resource "docker_container" "1nginx" {
│ 
│ A name must start with a letter or underscore and may contain only letters, digits, underscores, and dashes.

у терраформа есть требования к синаксису имен ресурса. нужно начинать с буквы или символа _. так же нельзя использовать сиволы кроме _- букв и цифр

меняем 1nginx на nginx

│ Error: Reference to undeclared resource
│ 
│   on main.tf line 39, in resource "docker_container" "nginx":
│   39:   name  = "example_${random_password.random_string_FAKE.resulT}"
│ 
│ A managed resource "random_password" "random_string_FAKE" has not been declared in the root module.

сылка на несуществующее имя. у нас в коде имя random_string. меняем random_string_FAKE на random_string. так же меняем атрибут resulT на правильный result

terraform validate
The configuration is valid.


#################
5)
Выполните код. В качестве ответа приложите: исправленный фрагмент кода и вывод команды docker ps

sudo terraform plan
sudo terraform apply

исправленный код
----------------
resource "docker_image" "nginx" {
  name         = "nginx:latest"
  keep_locally = true
}

resource "docker_container" "nginx" {
  image = docker_image.nginx.image_id
  name  = "example_${random_password.random_string.result}"

  ports {
    internal = 80
    external = 9090
  }
}
----------------

sudo docker ps

#################
6)
Замените имя docker-контейнера в блоке кода на hello_world. Не перепутайте имя контейнера и имя образа.
 Мы всё ещё продолжаем использовать name = "nginx:latest". Выполните команду terraform apply -auto-approve.
 Объясните своими словами, в чём может быть опасность применения ключа -auto-approve. 
 Догадайтесь или нагуглите зачем может пригодиться данный ключ? В качестве ответа дополнительно приложите вывод команды docker ps.

нет ручного подтверждения. соответсвенно полезно при автоматическом разворачивании. например в неизменных или тестовых средах. по этой же причине не использовать для продакшена!
 
sudo terraform plan
sudo terraform apply
sudo terraform apply -auto-approve

sudo docker ps

CONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS         PORTS                  NAMES
e22dfa50d083   3b25b682ea82   "/docker-entrypoint.…"   3 minutes ago   Up 3 minutes   0.0.0.0:9090->80/tcp   hello_world_3sMMPBxMDW6kpM0s


#################
7)

удалим ресурсы
sudo terraform destroy

проверим terraform.tfstate

cat terraform.tfstate
{
  "version": 4,
  "terraform_version": "1.8.4",
  "serial": 12,
  "lineage": "117d5165-2b98-95bb-999c-211330e98952",
  "outputs": {},
  "resources": [],
  "check_results": null
}

#################
8)
Объясните, почему при этом не был удалён docker-образ nginx:latest.
 Ответ ОБЯЗАТЕЛЬНО НАЙДИТЕ В ПРЕДОСТАВЛЕННОМ КОДЕ, а затем ОБЯЗАТЕЛЬНО ПОДКРЕПИТЕ строчкой из документации terraform провайдера docker.
 (ищите в классификаторе resource docker_image )
 
образ не был удален изза блока keep_locally = true в блоке 

resource "docker_image" "nginx" {
  name         = "nginx:latest"
  keep_locally = true
}

описано в документации ресурса :
https://docs.comcloud.xyz/providers/kreuzwerker/docker/latest/docs/resources/image

"Optional
keep_locally (Boolean) If true, then the Docker image won't be deleted on destroy operation. If this is false, it will delete the image from the docker local storage on destroy operation."

